
============================= class.cs ==========================

using System;
using System.Collections.Generic;

namespace Tree_
{
    public class TreeNode<T>
    {
        private T value;
        private bool has_parent;
        private List<TreeNode<T>> children;

        public TreeNode(T value)
        {
            if (value == null)
            {
                throw new ArgumentNullException("Cannot insert null value!");
            }
            this.value = value;
            this.children = new List<TreeNode<T>>();
        }

        public T Value
        {
            get { return this.value; }
            set { this.value = value; }
        }

        public int ChildrenCount
        {
            get { return this.children.Count; }
        }

        public void AddChild(TreeNode<T> child)
        {
            if (child == null)
            {
                throw new ArgumentNullException("Cannot insert null value!");
            }
            if (child.has_parent)
            {
                throw new ArgumentException("The node already has a parent!");
            }
            child.has_parent = true;
            this.children.Add(child);
        }

        public TreeNode<T> GetChild(int index)
        {
            return this.children[index];
        }
    }

    public class Tree<T>
    {
        private TreeNode<T> root;

        public Tree(T value)
        {
            if (value == null)
            {
                throw new ArgumentNullException("Cannot insert null value!");
            }
            this.root = new TreeNode<T>(value);
        }

        public Tree(T value, params Tree<T>[] children):this(value)
        {
            foreach (Tree<T> child in children)
            {
                this.root.AddChild(child.root);
            }
        }

        public TreeNode<T> Root
        {
            get { return this.root; }
        }

        private void PrintDFS(TreeNode<T> root, string spaces)
        {
            if (this.root == null)
                return;
            Console.WriteLine(spaces + root.Value);
            TreeNode<T> child = null;
            for (int i = 0; i<root.ChildrenCount;i++)
            {
                child = root.GetChild(i);
                PrintDFS(child, spaces + "\t");
            }
        }

        public void TraverseDFS()
        {
            this.PrintDFS(this.root, string.Empty);
        }

        // this block counts roots having K nodes
        static int value_found = 0;
        public void FindNode(int K)
        {
            this.TraverseAndFind(this.root, string.Empty, K);
            Console.WriteLine("Found " + value_found + " nodes");
        }

        private void TraverseAndFind(TreeNode<T> root, string spaces, int K)
        {
            if (this.root == null)
                return;
            if (root.ChildrenCount == K)
            {
                Console.WriteLine(root.Value);
                value_found++;
            }
            TreeNode<T> child = null;
            for (int i = 0; i < root.ChildrenCount; i++)
            {
                child = root.GetChild(i);
                TraverseAndFind(child, spaces + "\t", K);
            }
        }
    }
}


=================== main.cs ========================

using System;

namespace Tree_
{
    class Program
    {
        static void Main()
        {
            Tree<int> tree = new Tree<int>(7,new Tree<int>(19,new Tree<int>(1),new Tree<int>(12),new Tree<int>(7)),new Tree<int>(21),new Tree<int>(14,new Tree<int>(23),new Tree<int>(7)));
            tree.FindValue(3);
        }
    }
}