// developed by TIHOMIR DIMOV

using System;

class Program
{

    class DynamicListTest
    {
        static void Main()
        {
            DoublyLinkedList<string> shoppingList = new DoublyLinkedList<string>();
            shoppingList.Add("Milk");
            shoppingList.Remove("Milk"); // Empty list
            shoppingList.Add("Honey");
            shoppingList.Add("Olives");
            shoppingList.Add("Water");
            shoppingList[2] = "A lot of " + shoppingList[2];
            shoppingList.Add("Fruits");
            shoppingList.RemoveAt(0); // Removes "Honey" (first)
            shoppingList.RemoveAt(2); // Removes "Fruits" (last)
            shoppingList.Add(null);
            shoppingList.Add("Beer");
            shoppingList.Remove(null);
            Console.WriteLine("We need to buy:");
            for (int i = 0; i < shoppingList.Count; i++)
            {
                Console.WriteLine(" - " + shoppingList[i]);
            }
            Console.WriteLine("Position of 'Beer' = {0}",
            shoppingList.IndexOf("Beer"));
            Console.WriteLine("Position of 'Water' = {0}",
            shoppingList.IndexOf("Water"));
            Console.WriteLine("Do we have to buy Bread? " +
            shoppingList.Contains("Bread"));
        }
    }

    class DoublyLinkedList<T>
    {
        private class Node
        {
            private T element;
            private Node next;
            private Node prev;

            public Node(T element)
            {
                this.element = element;
                this.next = null;
                this.prev = null;
            }

            public Node(T element, Node prevNode)
            {
                this.element = element;
                this.prev = prevNode;
                prevNode.next = this;
            }

            public T Element
            {
                get { return this.element; }
                set { this.element = value; }
            }

            public Node Next
            {
                get { return this.next; }
                set { this.next = value; }
            }

            public Node Prev
            {
                get { return this.prev; }
                set { this.prev = value; }
            }
        }

        private Node head;
        private Node tail;
        private int count;

        public DoublyLinkedList()
        {
            this.head = null;
            this.tail = null;
            this.count = 0;
        }

        public int Count
        {
            get { return this.count; }
        }

        public T this[int index]
        {
            get
            {
                if (index >= count || index < 0)
                {
                    throw new ArgumentOutOfRangeException(
                    "Invalid index: " + index);
                }
                Node currentNode = this.head;
                for (int i = 0; i < index; i++)
                {
                    currentNode = currentNode.Next;
                }
                return currentNode.Element;
            }
            set
            {
                if (index >= count || index < 0)
                {
                    throw new ArgumentOutOfRangeException("Out of range!");
                }
                Node currentNode = this.head;
                for (int i = 0; i < index; i++)
                {
                    currentNode = currentNode.Next;
                }
                currentNode.Element = value;
            }
        }

        public void Add(T item)
        {
            if (this.head == null)
            {
                this.head = new Node(item);
                this.tail = this.head;
            }
            else
            {
                Node newItem = new Node(item, tail);
                this.tail = newItem;
            }
            count++;
        }

        public void Insert(T item, int index)
        {
            count++;
            if (index >= count || index < 0)
            {
                throw new ArgumentOutOfRangeException("Out of range!");
            }
            Node newItem = new Node(item);
            int currentIndex = 0;
            Node currentItem = this.head;
            Node prevItem = null;
            while (currentIndex < index)
            {
                prevItem = currentItem;
                currentItem = currentItem.Next;
                currentIndex++;
            }
            if (index == 0)
            {
                newItem.Prev = this.head.Prev;
                newItem.Next = this.head;
                this.head.Prev = newItem;
                this.head = newItem;
            }
            else if (index == count - 1)
            {
                newItem.Prev = this.tail;
                this.tail.Next = newItem;
                newItem = this.tail;
            }
            else
            {
                newItem.Next = prevItem.Next;
                prevItem.Next = newItem;
                newItem.Prev = currentItem.Prev;
                currentItem.Prev = newItem;
            }
        }

        public void Remove(T item)
        {
            int currentIndex = 0;
            Node currentItem = this.head;
            Node prevItem = null;
            while (currentItem != null)
            {
                if ((currentItem.Element != null &&
                currentItem.Element.Equals(item)) ||
                (currentItem.Element == null) && (item == null))
                {
                    break;
                }
                prevItem = currentItem;
                currentItem = currentItem.Next;
                currentIndex++;
            }
            if (currentItem != null)
            {
                count--;
                if (count == 0)
                {
                    this.head = null;
                }
                else if (prevItem == null)
                {
                    this.head = currentItem.Next;
                    this.head.Prev = null;
                }
                else if (currentItem == tail)
                {
                    currentItem.Prev.Next = null;
                    this.tail = currentItem.Prev;
                }
                else
                {
                    currentItem.Prev.Next = currentItem.Next;
                    currentItem.Next.Prev = currentItem.Prev;
                }
            }
        }

        public void RemoveAt(int index)
        {
            if (index >= this.count || index < 0)
            {
                throw new ArgumentOutOfRangeException("Out of range!");
            }

            int currentIndex = 0;
            Node currentItem = this.head;
            Node prevItem = null;
            while (currentIndex < index)
            {
                prevItem = currentItem;
                currentItem = currentItem.Next;
                currentIndex++;
            }
            if (this.count == 0)
            {
                this.head = null;
            }
            else if (prevItem == null)
            {
                this.head = currentItem.Next;
                this.head.Prev = null;
            }
            else if (index == count - 1)
            {
                prevItem.Next = currentItem.Next;
                tail = prevItem;
                currentItem = null;
            }
            else
            {
                prevItem.Next = currentItem.Next;
                currentItem.Next.Prev = prevItem;
            }
            count--;
        }

        public int IndexOf(T item)
        {
            int index = 0;
            Node currentItem = this.head;
            while (currentItem != null)
            {
                if ((currentItem.Element != null) && (object.Equals(currentItem.Element, item)) ||
                ((currentItem.Element == null) && (item == null)))
                {
                    return index;
                }
                index++;
                currentItem = currentItem.Next;
            }
            return -1;
        }

        public bool Contains(T element)
        {
            int index = IndexOf(element);
            bool contains = (index != -1);
            return contains;
        }

        public void Clear()
        {
            this.head = null;
            this.tail = null;
            this.count = 0;
        }
    }
}