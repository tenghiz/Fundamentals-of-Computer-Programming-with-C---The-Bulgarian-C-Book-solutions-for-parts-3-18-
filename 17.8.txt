=================== class.cs =====================

using System;
using System.Collections.Generic;  
 
namespace Graph_
{
    public class Graph
    {
        private List<int>[] childNodes;
        
        public Graph(int size)
        {
            this.childNodes = new List<int>[size];
            for (int i = 0; i < size; i++)
            {
                this.childNodes[i] = new List<int>();
            }
        }
 
        public Graph(List<int>[] childNodes)
        {
            this.childNodes = childNodes;
        }
 
        public int Size
        {
            get { return this.childNodes.Length; }
        }
  
        public void AddEdge(int u, int v)
        {
            childNodes[u].Add(v);
        }
    
        public void RemoveEdge(int u, int v)
        {
            childNodes[u].Remove(v);
        }
    
        public bool HasEdge(int u, int v)
        {
            bool hasEdge = childNodes[u].Contains(v);
            return hasEdge;
        }
   
        public IList<int> GetSuccessors(int v)
        {
            return childNodes[v];
        }
    }
}


================ main.cs =====================

// 10.8 - 

// Vertex degree = (total number of all edges)/(number of vertices).

// Cyclic graph - contains at least 1 cycle;
// Cycle graph - single circle. Number of vertices (node) = number of edges. Vertex degree = 2.

// Also, cyclic graph will have vertex degree >= 2.

using System;
using System.Collections.Generic;

namespace Graph_
{
    class GraphComponents
    {
        static Graph graph = new Graph(new List<int>[] {
new List<int>() {1,2}, // successors of vertice 0
new List<int>() {0,3}, // successors of vertice 1
new List<int>() {0,3}, // successors of vertice 2
new List<int>() {1,2,4,5}, // successors of vertice 3
new List<int>() {3,6}, // successors of vertice 4
new List<int>() {3,6}, // successors of vertice 5
new List<int>() {4,5,7,8}, // successors of vertice 6
new List<int>() {6,9}, // successors of vertice 7
new List<int>() {6,9}, // successors of vertice 8
new List<int>() {7,8} // successors of vertice 9
});

        static bool[] visited = new bool[graph.Size];
        static int edges = 0;

        static void TraverseDFS(int v)
        {
            if (!visited[v])
            {
                Console.Write(v + " ");
                visited[v] = true;
                foreach (int child in graph.GetSuccessors(v))
                {
                    edges++;
                    TraverseDFS(child);
                }
            }
        }

        static void Main()
        {
            Console.WriteLine("Connected graph components: ");
            for (int v = 0; v < graph.Size; v++)
            {
                if (!visited[v])
                {
                    TraverseDFS(v);
                    Console.WriteLine();
                    Console.WriteLine("Vertex degree of a cyclic graph must be at least 2.");
                    Console.WriteLine("The total number of edges is " + edges);
                    Console.WriteLine("The total number of vertices is " + graph.Size);
                    double vertex_degree = (double)edges / (double)graph.Size;
                    Console.WriteLine("Vertex degree is " + vertex_degree);
                    if (vertex_degree >= 2)
                        Console.WriteLine("This is a cyclic graph");
                    if (vertex_degree < 2)
                        Console.WriteLine("This is not a cyclic graph");
                }
            }
        }
    }
}