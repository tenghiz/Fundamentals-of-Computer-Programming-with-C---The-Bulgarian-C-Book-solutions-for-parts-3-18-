// quick sort - GFG

using System;

class QuickSortClass
{
    static int Partition(int[] arr, int low, int high)
    {
        int pivot = arr[high];

        int i = low - 1;
        for (int j = low;j<high;j++)
        {
            if (arr[j] <= pivot)
            {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        int temp1 = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp1;

        return i + 1;
    }

    static void QuickSort(int [] arr, int low, int high)
    {
        if (low<high)
        {
            int pi = Partition(arr, low, high);

            QuickSort(arr, low, pi - 1);
            QuickSort(arr, pi+1, high);
        }

    }

    public static void Main()
    {
        Console.Write("Please enter the length of array: ");
        int a = int.Parse(Console.ReadLine());
        int[] arr = new int[a];
        Random rnd = new Random();
        Console.WriteLine("Generated array: ");
        for (int i = 0;i<a;i++)
        {
            arr[i] = rnd.Next(100);
            Console.Write(arr[i] + " ");
        }
        Console.WriteLine();
        Console.WriteLine("Performing merge sort...");
        QuickSort(arr, 0, a-1);
        for (int i = 0; i < a; i++)
        {
            Console.Write(arr[i] + " ");
        }
        Console.WriteLine();
    }
}