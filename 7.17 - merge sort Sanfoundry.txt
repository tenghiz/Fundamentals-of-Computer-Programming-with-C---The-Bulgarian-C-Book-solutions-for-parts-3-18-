// merge sort - Sanfoundry

// geeksforgeeks contains bugs

using System;

class MergeSortClass
{
    static void Merge(int[] arr, int l, int m, int r)
    {
        int i, j, k;
        int [] temp = new int [r - l + 1];
        i = l;
        k = 0;
        j = m + 1;

        while (i <= m && j <= r)
        {
            if (arr[i] < arr[j])
            {
                temp[k] = arr[i];
                k++;
                i++;
            }
            else
            {
                temp[k] = arr[j];
                k++;
                j++;
            }
        }

        while (i <= m)
        {
            temp[k] = arr[i];
            k++;
            i++;
        }

        while (j <= r)
        {
            temp[k] = arr[j];
            k++;
            j++;
        }

        for (i = l; i <= r; i++)
        {
            arr[i] = temp[i - l];
        }
    }

    static void MergeSort(int [] arr, int l, int r)
    {
        if (l<r)
        {
            int m = (r + l) / 2; // GEEKSFORGEEKS propose l+(r-l)/2

            MergeSort(arr, l, m);
            MergeSort(arr, m + 1, r);

            Merge(arr, l, m, r);
        }
    }

    public static void Main()
    {
        Console.Write("Please enter the length of array: ");
        int a = int.Parse(Console.ReadLine());
        int[] arr = new int[a];
        Random rnd = new Random();
        Console.WriteLine("Generated array: ");
        for (int i = 0;i<a;i++)
        {
            arr[i] = rnd.Next(100);
            Console.Write(arr[i] + " ");
        }
        Console.WriteLine();
        Console.WriteLine("Performing merge sort...");
        MergeSort(arr, 0, a-1);
        for (int i = 0; i < a; i++)
        {
            Console.Write(arr[i] + " ");
        }
        Console.WriteLine();
    }
}