======================== class.cs =================

using System;
using System.Collections.Generic;

namespace Graph_
{
    public class Node<T>
    {
        public int Index { get; set;}
        public T Data { get; set; }
        public List<Node<T>> Neighbors { get; set; } = new List<Node<T>>();
        public List<int> Weights { get; set; } = new List<int>();

        public override string ToString()
        {
            return $"Node with index {Index}:{Data}, neighbors: {Neighbors.Count}";
        }
    }

    public class Edge<T>
    {
        public Node<T> From { get; set; }
        public Node<T> To { get; set; }
        public int Weight { get; set; }

        public override string ToString()
        {
            return $"Edge: {From.Data}->{To.Data}, weight: {Weight}";
        }
    }

    public class Graph<T>
    {
        private bool _isDirected = false;
        private bool _isWeighted = false;
        public List<Node<T>> Nodes { get; set; } = new List<Node<T>>();

        public Graph(bool IsDirected, bool IsWeighted)
        {
            this._isDirected = IsDirected;
            this._isWeighted = IsWeighted;
        }

        public int GetWeight(Node<T> n1, Node<T> n2)
        {
            int index = 0;
            int counter = 0;
            foreach (Node<T> neighbor in n1.Neighbors)
            {
                if (neighbor == n2)
                {
                    index = n1.Neighbors.IndexOf(neighbor);
                    counter++;
                }
            }
            if (counter == 1)
                return n1.Weights[index];
            else
                return - 1;
        }

        // indexer
        public Edge<T> this[int from, int to]
        {
            get
            {
                Node<T> nodeFrom = Nodes[from];
                Node<T> nodeTo = Nodes[to];
                int i = nodeFrom.Neighbors.IndexOf(nodeTo);
                if (i >= 0)
                {
                    Edge<T> edge = new Edge<T>()
                    {
                        From = nodeFrom,
                        To = nodeTo,
                        Weight = i < nodeFrom.Weights.Count ? nodeFrom.Weights[i] : 0
                    };
                    return edge;
                }
                return null;
            }
        }

        public Node<T> AddNode(T value)
        {
            Node<T> node = new Node<T>() { Data = value };
            Nodes.Add(node);
            UpdateIndices();
            return node;
        }

        public void RemoveNode(Node<T> NodeToRemove)
        {
            Nodes.Remove(NodeToRemove);
            UpdateIndices();
            foreach (Node<T> node in Nodes)
            {
                RemoveEdge(node, NodeToRemove);
            }
        }

        public void RemoveEdge(Node<T> from, Node<T> to)
        {
            int index = from.Neighbors.FindIndex(n => n == to);
            if (index >= 0)
            {
                from.Neighbors.RemoveAt(index);
                if (_isWeighted)
                {
                    from.Weights.RemoveAt(index);
                }
            }
        }

        public void AddEdge(Node<T> from, Node<T> to, int weight = 0)
        {
            from.Neighbors.Add(to);
            if (_isWeighted)
            {
                from.Weights.Add(weight);
            }

            if (!_isDirected)
            {
                to.Neighbors.Add(from);
                if (_isWeighted)
                {
                    to.Weights.Add(weight);
                }
            }
        }

        public List<Edge<T>> GetEdges()
        {
            List<Edge<T>> edges = new List<Edge<T>>();
            foreach(Node<T> from in Nodes)
            {
                for (int i = 0; i < from.Neighbors.Count; i++)
                {
                    Edge<T> edge = new Edge<T>()
                    {
                        From = from,
                        To = from.Neighbors[i],
                        Weight = i < from.Weights.Count ? from.Weights[i] : 0
                    };
                    edges.Add(edge);
                }
            }
            return edges;
        }

        private void UpdateIndices()
        {
            int i = 0;
            Nodes.ForEach(n => n.Index = i++);
        }
    }
}


==================== main.cs ======================

// A version with a lot of flaws

// This program uses slightly modified BFS search method
// which allows to enqueue repeatedly all the elements in order to explore 
// all the connections.

// Once the desired element is found, the total content of queue is analysed
// because it may contain several instances of starting node and ending node.
// SN a b c d e f EN g h i j k l m EN ...
// Subroutine PATH rebuilds the route from EN to SN in a following manner:
// loop while first checks if element F is the parent of EN.
// If yes, then the loop checks whether E is the parent of F, and so on.
// If F is not the parent of EN, then the loop checks if E is the parent of EN, a nd so on.

// Then the first instance of EN is removed from the list, and the loop begins the same analysis
// for the following instance (if it is present) of EN.

using System;
using System.Collections.Generic;

namespace Graph_
{
    class Program
    {
        static void Main()
        {
            Graph<int> graph = new Graph<int>(true, true);
            Node<int> n1 = graph.AddNode(1);
            Node<int> n2 = graph.AddNode(2);
            Node<int> n3 = graph.AddNode(3);
            Node<int> n4 = graph.AddNode(4);
            Node<int> n5 = graph.AddNode(5);
            Node<int> n6 = graph.AddNode(6);
            Node<int> n7 = graph.AddNode(7);
            Node<int> n8 = graph.AddNode(8);
            graph.AddEdge(n1, n2, 9);
            graph.AddEdge(n1, n3, 5);
            graph.AddEdge(n2, n1, 3);
            graph.AddEdge(n2, n4, 18);
            graph.AddEdge(n3, n4, 12);
            graph.AddEdge(n4, n2, 2);
            graph.AddEdge(n4, n8, 8);
            graph.AddEdge(n5, n4, 9);
            graph.AddEdge(n5, n8, 3);
            graph.AddEdge(n5, n6, 2);
            graph.AddEdge(n5, n7, 5);
            graph.AddEdge(n6, n7, 1);
            graph.AddEdge(n7, n5, 4);
            graph.AddEdge(n7, n8, 6);
            graph.AddEdge(n8, n5, 3);

            BFS(graph, n5, n1);
        }

        static List<Node<int>> list = new List<Node<int>>();
        static void BFS(Graph<int> graph, Node<int> node1, Node<int> node2)
        {
            Queue<Node<int>> queue = new Queue<Node<int>>();
            queue.Enqueue(node1);
            while (queue.Count > 0)
            {
                Node<int> next = queue.Dequeue();
                list.Add(next);
                if (next == node2)
                    break;
                foreach (Node<int> neighbor in next.Neighbors)
                {
                    queue.Enqueue(neighbor);                   
                }
            }
            while (queue.Count > 0)
            {
                Node<int> next = queue.Dequeue();
                list.Add(next);
            }
            Path(graph, node1, node2);
        }

        static void Path(Graph<int> graph, Node<int> node1, Node<int> node2)
        {
            while(true)
            {
                int end = list.IndexOf(node2);
                if (end == -1)
                    break;
                int end_ = end;
                List<Node<int>> path = new List<Node<int>>();
                path.Add(list[end]);
                int z = 1;
                while (end > 0)
                {
                    foreach (Node<int> neighbor in list[end - z].Neighbors)
                    {
                        if (neighbor.Equals(list[end]))
                        {
                            path.Add(list[end - z]);
                            end -= z;
                            z = 0;
                        }
                    }
                    z++;
                }
                for (int i = 0; i < path.Count; i++)
                {
                    Console.Write(path[i].Data + " ");
                }
                Console.WriteLine();
                int distance = 0;
                for (int i = path.Count - 2; i > -1; i--)
                {
                    distance += graph.GetWeight(path[i + 1], path[i]);
                }
                Console.WriteLine("Distance = " + distance);
                list.RemoveAt(end_);
            }
        }
    }
}